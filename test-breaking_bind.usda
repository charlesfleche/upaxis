#usda 1.0
(
	defaultPrim = "SkelRoot"
	metersPerUnit = 1
	startTimeCode = 1
	endTimeCode = 10
	upAxis = "Z"
)

def "Axis_ExcludedFromCompensation" (
	references = @./axis.usda@
)
{
}

def SkelRoot "SkelRoot"
{
    matrix4d xformOp:transform:compensation = (
        ( 1, 0, 0, 0),
        ( 0, 1, 0, 0),
        ( 0, 0, 1, 0),
        (.5, 0, 0, 1)
    )
    float3 xformOp:translate:payload = (.5, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:transform:compensation", "xformOp:translate:payload"]

    def Skeleton "Skeleton" (
		prepend apiSchemas = ["SkelBindingAPI"]
	)
    {
        matrix4d xformOp:transform:compensation = (
            (1, 0, 0, 0),
            (0, 1, 0, 0),
            (0, 0, 1, 0),
            (0, 0, 0.5, 1)
        )
        float3 xformOp:translate:payload = (0, 0, .5)
        uniform token[] xformOpOrder = ["xformOp:transform:compensation", "xformOp:translate:payload"]

        uniform token[] joints = ["bottom", "bottom/top"]

        uniform matrix4d[] bindTransforms = [(
                (1, 0, 0, 0),
                (0, 1, 0, 0),
                (0, 0, 1, 0),
                (.5, 0, .5, 1)
            ), (
                (1, 0,  0, 0),
                (0, 1,  0, 0),
                (0, 0,  1, 0),
                (.5, 0, 1.5, 1)
        )]

		uniform matrix4d[] restTransforms = [(
                (1, 0, 0, 0),
                (0, 1, 0, 0),
                (0, 0, 1, 0),
                (.5, 0, .5, 1)
            ), (
                (1, 0, 0, 0),
                (0, 1, 0, 0),
                (0, 0, 1, 0),
                (0, 0, 1, 1)
        )]

        def SkelAnimation "SkelAnimation" {
			uniform token[] joints = ["bottom", "bottom/top"]

           float3[] translations.timeSamples = {
				1: [(0, 0, 1), (0, 0, 1)],
				10: [(0, 0, 1), (0, 0, 2)]
			}
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0), (1, 0, 0, 0)],
                10: [(0.7071, 0, 0, 0.7071), (1, 0, 0, 0)]
            }
            half3[] scales = [(1, 1, 1), (1, 1, 1)]
		}

		rel skel:animationSource = </SkelRoot/Skeleton/SkelAnimation>
    }

    def Mesh "Mesh" (
		prepend apiSchemas = ["SkelBindingAPI"]
	)
    {
        matrix4d xformOp:transform:compensation = (
            (1,   0, 0, 0),
            (0,   1, 0, 0),
            (0,   0, 1, 0),
            (-1, 0, 0, 1)
        )
        float3 xformOp:translate:payload = (-1, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:transform:compensation", "xformOp:translate:payload"]

        int[] faceVertexCounts = [3]
		int[] faceVertexIndices = [0, 1, 2]
		point3f[] points = [
			(.0, 0, 0),
			(.5, 0, 0),
			(.0, 0, 1)
		]
		color3f[] primvars:displayColor = [
			(0, 0, 0),
			(1, 0, 0),
			(0, 0, 1)
		] (
			interpolation = "vertex"
			elementSize = 1
		)

        rel skel:skeleton = </SkelRoot/Skeleton>

        matrix4d primvars:skel:geomBindTransform = (
            (1, 0, 0, 0),
            (0, 1, 0, 0),
            (0, 0, 1, 0),
            (.5, 0, .5, 1)
		)

        int[] primvars:skel:jointIndices = [0, 0, 1] (
			interpolation = "vertex"
			elementSize = 1
		)
		float[] primvars:skel:jointWeights = [1, 1, 1] (
			interpolation = "vertex"
			elementSize = 1
		)
    }
}
