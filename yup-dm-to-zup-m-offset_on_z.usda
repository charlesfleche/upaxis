#usda 1.0
(
	defaultPrim = "CompensateToZUpMeters_PayloadMoveUp1Meter_UpwardTriangle"
	endTimeCode = 10
	metersPerUnit = .1
	upAxis = "Y"
)

def "Axis_ExcludedFromCompensation" (
	references = @./axis.usda@
)
{
}

def Mesh "UpwardTriangle_CompensateToZUpMeters_PayloadMoveUp1Meter"
{
	float3 xformOp:scale:compensation:metersPerUnit:metersToCentimeters = (10, 10, 10)
	float3 xformOp:rotateXYZ:compensation:upAxis:ZToY = (-90, 0, 0)
	float3 xformOp:translate:payload:moveUp1Unit = (0, 0, 1)

	# This matrix is the concatenation of the two compensation matrices above.
	# The code in this prototype expects the compensation matrix to be marked
	# as a matrix4d xformOp:transport:compensation
	# We can think about other schemes, like considering all xformOp:*:compensation:**
	# transform ops to be the compensation. But for the purpose of this prototype,
	# xformOp:transport:compensation it is. The trick of putting
	# compensation, !invert!compensation in the xformOp is to make this transform
	# robust to USD layering and flattening: without this we are at the risk of having
	# an unused transformation discarded.

	matrix4d xformOp:transform:compensation = (
		(10,  0,   0, 0),
        ( 0,  0, -10, 0),
        ( 0, 10,   0, 0),
        ( 0,  0,   0, 1)
	)

	uniform token[] xformOpOrder = [
		"xformOp:transform:compensation",
		"!invert!xformOp:transform:compensation",

		"xformOp:scale:compensation:metersPerUnit:metersToCentimeters",
		"xformOp:rotateXYZ:compensation:upAxis:ZToY",

		"xformOp:translate:payload:moveUp1Unit"
	]

	int[] faceVertexCounts = [3]
	int[] faceVertexIndices = [0, 1, 2]
	point3f[] points = [(0, 0, 0), (.5, 0, 0), (0, 0, 1)]
}

def Mesh "DownwardTriangle_CompensateNone_PayloadRotate180DegreesAroundXMoveDown10Decimeters"
{
	float3 xformOp:rotateXYZ = (180, 0, 0)
	float3 xformOp:translate = (0, 10, 0)

	uniform token[] xformOpOrder = ["xformOp:rotateXYZ", "xformOp:translate"]

	int[] faceVertexCounts = [3]
	int[] faceVertexIndices = [0, 2, 1]
	point3f[] points = [(0, 0, 0), (5, 0, 0), (0, 10, 0)]
}
